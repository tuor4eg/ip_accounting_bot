package money_test

import (
	"testing"

	"github.com/tuor4eg/ip_accounting_bot/internal/money"
)

func TestParseAmount(t *testing.T) {
	t.Parallel()

	cases := []struct {
		in   string
		want int64
		ok   bool // true => expect no error
		desc string
	}{
		// Basic integer amounts
		{"0", 0, true, "zero amount"},
		{"1234", 1234 * 100, true, "simple integer"},
		{"1000000", 1000000 * 100, true, "large integer"},

		// Decimal amounts with different separators
		{"1 234,56", 123456, true, "space thousands + comma decimal"},
		{"1.234,56", 123456, true, "dot thousands + comma decimal"},
		{"1,234.56", 123456, true, "comma thousands + dot decimal"},
		{"1234,5", 123450, true, "single decimal digit with comma"},
		{"1234.5", 123450, true, "single decimal digit with dot"},
		{"1234,50", 123450, true, "two decimal digits with comma"},
		{"1234.50", 123450, true, "two decimal digits with dot"},

		// Token-based amounts
		{"10р 50к", 1050, true, "russian abbreviations"},
		{"50к", 50, true, "kopecks only"},
		{"10р", 1000, true, "rubles only"},
		{"10 руб 50 коп", 1050, true, "full russian words"},
		{"10 rub 50", 1050, true, "latin abbreviations"},
		{"10 RUB 50", 1050, true, "uppercase latin"},
		{"10р 50", 1050, true, "mixed russian + number"},
		{"10 rub 50к", 1050, true, "mixed latin + russian"},

		// Large amounts with separators
		{"1 234 руб", 1234 * 100, true, "space thousands + rubles"},
		{"1.234 руб", 1234 * 100, true, "dot thousands + rubles"},
		{"1,234 руб", 1234 * 100, true, "comma thousands + rubles"},
		{"1 000 000", 1000000 * 100, true, "multiple space separators"},
		{"1.000.000", 1000000 * 100, true, "multiple dot separators"},
		{"1,000,000", 1000000 * 100, true, "multiple comma separators"},
		{"1 000 000,50", 100000050, true, "large amount with decimals"},
		{"1.000.000,50", 100000050, true, "large amount with mixed separators"},

		// Mixed separators and tokens
		{"1.000р 50к", 100050, true, "dot thousands + russian tokens"},
		{"1,000р 50к", 100050, true, "comma thousands + russian tokens"},
		{"1 000р 50к", 100050, true, "space thousands + russian tokens"},
		{"1.000 rub 50", 100050, true, "dot thousands + latin tokens"},
		{"1,000 rub 50", 100050, true, "comma thousands + latin tokens"},

		// Edge cases with separators
		{"1.234.567,89", 123456789, true, "multiple separators with decimals"},
		{"1,234,567.89", 123456789, true, "multiple separators with dot decimal"},
		{"1 234 567,89", 123456789, true, "multiple space separators with decimals"},

		// Currency symbols
		{"1234₽", 1234 * 100, true, "ruble symbol"},
		{"1234 ₽", 1234 * 100, true, "ruble symbol with space"},
		{"1234,50₽", 5000, true, "ruble symbol with decimals (treated as rubles token)"},

		// Alternative separators
		{"1_234", 1234 * 100, true, "underscore separator"},
		{"1'234", 1234 * 100, true, "apostrophe separator"},
		{"1_234,56", 123456, true, "underscore + comma decimal"},
		{"1'234,56", 123456, true, "apostrophe + comma decimal"},

		// NBSP and special spaces
		{"1\u00A0234", 1234 * 100, true, "NBSP separator"},
		{"1\u202F234", 1234 * 100, true, "narrow NBSP separator"},
		{"1\u2007234", 1234 * 100, true, "figure space separator"},

		// Valid cases that work correctly
		{"123,456,789", 12345678900, true, "large number with many separators"},
		{"123.456.789", 12345678900, true, "large number with dot separators"},
		{"1234,567", 123456700, true, "number with 3 decimal digits (treated as thousands)"},
		{"1234.567", 123456700, true, "number with 3 decimal digits with dot (treated as thousands)"},
		{"1234,5,6", 1234560, true, "multiple separators (last is decimal)"},
		{"1234.5.6", 1234560, true, "multiple separators with dots (last is decimal)"},
		{"1234,5,67", 1234567, true, "mixed separators (last is decimal)"},
		{"1234.5.67", 1234567, true, "mixed separators with dots (last is decimal)"},

		// Token cases that actually work
		{"р50", 5000, true, "token without number (treated as rubles)"},
		{"50рр", 5000, true, "invalid token format (treated as rubles)"},
		{"50кк", 50, true, "invalid kopecks format (treated as kopecks)"},
		{"10р 50р", 6010, true, "two ruble tokens (summed)"},
		{"10к 50к", 60, true, "two kopecks tokens (summed)"},
		{"10р 50р 25к", 6025, true, "multiple ruble tokens + kopecks (summed)"},
		{"10р 50к 25к", 1075, true, "rubles + multiple kopecks tokens (summed)"},
		{"10р 50к 25", 1050, true, "extra number without token (treated as kopecks)"},
		{"10р 50 25к", 1025, true, "number between tokens (treated as kopecks)"},
		{"10р 50к 25р", 3550, true, "mixed token order (summed)"},
		{"10р 50к 25к 30р", 4075, true, "multiple mixed tokens (summed)"},
		{"1.234.567.890", 123456789000, true, "too many separators (all treated as thousands)"},
		{"1,234,567,890", 123456789000, true, "too many comma separators (all treated as thousands)"},
		{"1 234 567 890", 123456789000, true, "too many space separators (all treated as thousands)"},

		// Cases that work with whitespace characters
		{"123'456", 123456 * 100, true, "numbers with single quote (treated as separator)"},
		{"123\t456", 123456 * 100, true, "numbers with tab (treated as separator)"},
		{"123\n456", 123456 * 100, true, "numbers with newline (treated as separator)"},
		{"123\r456", 123456 * 100, true, "numbers with carriage return (treated as separator)"},
		{"123\f456", 123456 * 100, true, "numbers with form feed (treated as separator)"},
		{"123\v456", 123456 * 100, true, "numbers with vertical tab (treated as separator)"},

		// Invalid cases that should fail
		{"-1", 0, false, "negative amount"},
		{"сто рублей", 0, false, "text instead of numbers"},
		{"", 0, false, "empty string"},
		{"abc", 0, false, "letters only"},
		{"123abc", 0, false, "numbers with letters"},
		{"abc123", 0, false, "letters with numbers"},
		{"123abc456", 0, false, "numbers with letters in between"},
		{"abc123def", 0, false, "letters with numbers in between"},
		{"123@456", 0, false, "numbers with invalid symbols"},
		{"123#456", 0, false, "numbers with hash symbol"},
		{"123$456", 0, false, "numbers with dollar symbol"},
		{"123%456", 0, false, "numbers with percent symbol"},
		{"123^456", 0, false, "numbers with caret symbol"},
		{"123&456", 0, false, "numbers with ampersand symbol"},
		{"123*456", 0, false, "numbers with asterisk symbol"},
		{"123(456", 0, false, "numbers with opening parenthesis"},
		{"123)456", 0, false, "numbers with closing parenthesis"},
		{"123[456", 0, false, "numbers with opening bracket"},
		{"123]456", 0, false, "numbers with closing bracket"},
		{"123{456", 0, false, "numbers with opening brace"},
		{"123}456", 0, false, "numbers with closing brace"},
		{"123|456", 0, false, "numbers with pipe symbol"},
		{"123\\456", 0, false, "numbers with backslash"},
		{"123/456", 0, false, "numbers with forward slash"},
		{"123?456", 0, false, "numbers with question mark"},
		{"123!456", 0, false, "numbers with exclamation mark"},
		{"123~456", 0, false, "numbers with tilde"},
		{"123`456", 0, false, "numbers with backtick"},
		{"123+456", 0, false, "numbers with plus sign"},
		{"123=456", 0, false, "numbers with equals sign"},
		{"123<456", 0, false, "numbers with less than"},
		{"123>456", 0, false, "numbers with greater than"},
		{"123;456", 0, false, "numbers with semicolon"},
		{"123:456", 0, false, "numbers with colon"},
		{"123\"456", 0, false, "numbers with quote"},
		{"123\b456", 0, false, "numbers with backspace"},
		{"123\a456", 0, false, "numbers with bell"},
		{"123\000456", 0, false, "numbers with null byte"},
		{"123\001456", 0, false, "numbers with start of heading"},
		{"123\002456", 0, false, "numbers with start of text"},
		{"123\003456", 0, false, "numbers with end of text"},
		{"123\004456", 0, false, "numbers with end of transmission"},
		{"123\005456", 0, false, "numbers with enquiry"},
		{"123\006456", 0, false, "numbers with acknowledge"},
		{"123\007456", 0, false, "numbers with bell"},
		{"123\010456", 0, false, "numbers with backspace"},
		{"123\011456", 123456 * 100, true, "numbers with horizontal tab (treated as separator)"},
		{"123\012456", 123456 * 100, true, "numbers with line feed (treated as separator)"},
		{"123\013456", 123456 * 100, true, "numbers with vertical tab (treated as separator)"},
		{"123\014456", 123456 * 100, true, "numbers with form feed (treated as separator)"},
		{"123\015456", 123456 * 100, true, "numbers with carriage return (treated as separator)"},
		{"123\016456", 0, false, "numbers with shift out"},
		{"123\017456", 0, false, "numbers with shift in"},
		{"123\020456", 0, false, "numbers with data link escape"},
		{"123\021456", 0, false, "numbers with device control 1"},
		{"123\022456", 0, false, "numbers with device control 2"},
		{"123\023456", 0, false, "numbers with device control 3"},
		{"123\024456", 0, false, "numbers with device control 4"},
		{"123\025456", 0, false, "numbers with negative acknowledge"},
		{"123\026456", 0, false, "numbers with synchronous idle"},
		{"123\027456", 0, false, "numbers with end of transmission block"},
		{"123\030456", 0, false, "numbers with cancel"},
		{"123\031456", 0, false, "numbers with end of medium"},
		{"123\032456", 0, false, "numbers with substitute"},
		{"123\033456", 0, false, "numbers with escape"},
		{"123\034456", 0, false, "numbers with file separator"},
		{"123\035456", 0, false, "numbers with group separator"},
		{"123\036456", 0, false, "numbers with record separator"},
		{"123\037456", 0, false, "numbers with unit separator"},
		{"123\177456", 0, false, "numbers with delete"},
		{"123\200456", 0, false, "numbers with padding character"},
		{"123\201456", 0, false, "numbers with high octet preset"},
		{"123\202456", 0, false, "numbers with break permitted here"},
		{"123\203456", 0, false, "numbers with no break here"},
		{"123\204456", 0, false, "numbers with index"},
		{"123\205456", 0, false, "numbers with next line"},
		{"123\206456", 0, false, "numbers with start of string"},
		{"123\207456", 0, false, "numbers with end of string"},
		{"123\210456", 0, false, "numbers with character tabulation set"},
		{"123\211456", 0, false, "numbers with character tabulation with justification"},
		{"123\212456", 0, false, "numbers with line tabulation set"},
		{"123\213456", 0, false, "numbers with partial line forward"},
		{"123\214456", 0, false, "numbers with partial line backward"},
		{"123\215456", 0, false, "numbers with reverse line feed"},
		{"123\216456", 0, false, "numbers with single shift two"},
		{"123\217456", 0, false, "numbers with single shift three"},
		{"123\220456", 0, false, "numbers with device control string"},
		{"123\221456", 0, false, "numbers with private use one"},
		{"123\222456", 0, false, "numbers with private use two"},
		{"123\223456", 0, false, "numbers with set transmit state"},
		{"123\224456", 0, false, "numbers with cancel character"},
		{"123\225456", 0, false, "numbers with message waiting"},
		{"123\226456", 0, false, "numbers with start of protected area"},
		{"123\227456", 0, false, "numbers with end of protected area"},
		{"123\230456", 0, false, "numbers with start of string"},
		{"123\231456", 0, false, "numbers with single graphic character introducer"},
		{"123\232456", 0, false, "numbers with single character introducer"},
		{"123\233456", 0, false, "numbers with control sequence introducer"},
		{"123\234456", 0, false, "numbers with string terminator"},
		{"123\235456", 0, false, "numbers with operating system command"},
		{"123\236456", 0, false, "numbers with privacy message"},
		{"123\237456", 0, false, "numbers with application program command"},
		{"123\240456", 0, false, "numbers with no-break space"},
		{"123\241456", 0, false, "numbers with inverted exclamation mark"},
		{"123\242456", 0, false, "numbers with cent sign"},
		{"123\243456", 0, false, "numbers with pound sign"},
		{"123\244456", 0, false, "numbers with currency sign"},
		{"123\245456", 0, false, "numbers with yen sign"},
		{"123\246456", 0, false, "numbers with broken bar"},
		{"123\247456", 0, false, "numbers with section sign"},
		{"123\250456", 0, false, "numbers with diaeresis"},
		{"123\251456", 0, false, "numbers with copyright sign"},
		{"123\252456", 0, false, "numbers with feminine ordinal indicator"},
		{"123\253456", 0, false, "numbers with left-pointing double angle quotation mark"},
		{"123\254456", 0, false, "numbers with not sign"},
		{"123\255456", 0, false, "numbers with soft hyphen"},
		{"123\256456", 0, false, "numbers with registered sign"},
		{"123\257456", 0, false, "numbers with macron"},
		{"123\260456", 0, false, "numbers with degree sign"},
		{"123\261456", 0, false, "numbers with plus-minus sign"},
		{"123\262456", 0, false, "numbers with superscript two"},
		{"123\263456", 0, false, "numbers with superscript three"},
		{"123\264456", 0, false, "numbers with acute accent"},
		{"123\265456", 0, false, "numbers with micro sign"},
		{"123\266456", 0, false, "numbers with pilcrow sign"},
		{"123\267456", 0, false, "numbers with middle dot"},
		{"123\270456", 0, false, "numbers with cedilla"},
		{"123\271456", 0, false, "numbers with superscript one"},
		{"123\272456", 0, false, "numbers with masculine ordinal indicator"},
		{"123\273456", 0, false, "numbers with right-pointing double angle quotation mark"},
		{"123\274456", 0, false, "numbers with vulgar fraction one quarter"},
		{"123\275456", 0, false, "numbers with vulgar fraction one half"},
		{"123\276456", 0, false, "numbers with vulgar fraction three quarters"},
		{"123\277456", 0, false, "numbers with inverted question mark"},
		{"123\300456", 0, false, "numbers with latin capital letter a with grave"},
		{"123\301456", 0, false, "numbers with latin capital letter a with acute"},
		{"123\302456", 0, false, "numbers with latin capital letter a with circumflex"},
		{"123\303456", 0, false, "numbers with latin capital letter a with tilde"},
		{"123\304456", 0, false, "numbers with latin capital letter a with diaeresis"},
		{"123\305456", 0, false, "numbers with latin capital letter a with ring above"},
		{"123\306456", 0, false, "numbers with latin capital letter ae"},
		{"123\307456", 0, false, "numbers with latin capital letter c with cedilla"},
		{"123\310456", 0, false, "numbers with latin capital letter e with grave"},
		{"123\311456", 0, false, "numbers with latin capital letter e with acute"},
		{"123\312456", 0, false, "numbers with latin capital letter e with circumflex"},
		{"123\313456", 0, false, "numbers with latin capital letter e with diaeresis"},
		{"123\314456", 0, false, "numbers with latin capital letter i with grave"},
		{"123\315456", 0, false, "numbers with latin capital letter i with acute"},
		{"123\316456", 0, false, "numbers with latin capital letter i with circumflex"},
		{"123\317456", 0, false, "numbers with latin capital letter i with diaeresis"},
		{"123\320456", 0, false, "numbers with latin capital letter eth"},
		{"123\321456", 0, false, "numbers with latin capital letter n with tilde"},
		{"123\322456", 0, false, "numbers with latin capital letter o with grave"},
		{"123\323456", 0, false, "numbers with latin capital letter o with acute"},
		{"123\324456", 0, false, "numbers with latin capital letter o with circumflex"},
		{"123\325456", 0, false, "numbers with latin capital letter o with tilde"},
		{"123\326456", 0, false, "numbers with latin capital letter o with diaeresis"},
		{"123\327456", 0, false, "numbers with multiplication sign"},
		{"123\330456", 0, false, "numbers with latin capital letter o with stroke"},
		{"123\331456", 0, false, "numbers with latin capital letter u with grave"},
		{"123\332456", 0, false, "numbers with latin capital letter u with acute"},
		{"123\333456", 0, false, "numbers with latin capital letter u with circumflex"},
		{"123\334456", 0, false, "numbers with latin capital letter u with diaeresis"},
		{"123\335456", 0, false, "numbers with latin capital letter y with acute"},
		{"123\336456", 0, false, "numbers with latin capital letter thorn"},
		{"123\337456", 0, false, "numbers with latin small letter sharp s"},
		{"123\340456", 0, false, "numbers with latin small letter a with grave"},
		{"123\341456", 0, false, "numbers with latin small letter a with acute"},
		{"123\342456", 0, false, "numbers with latin small letter a with circumflex"},
		{"123\343456", 0, false, "numbers with latin small letter a with tilde"},
		{"123\344456", 0, false, "numbers with latin small letter a with diaeresis"},
		{"123\345456", 0, false, "numbers with latin small letter a with ring above"},
		{"123\346456", 0, false, "numbers with latin small letter ae"},
		{"123\347456", 0, false, "numbers with latin small letter c with cedilla"},
		{"123\350456", 0, false, "numbers with latin small letter e with grave"},
		{"123\351456", 0, false, "numbers with latin small letter e with acute"},
		{"123\352456", 0, false, "numbers with latin small letter e with circumflex"},
		{"123\353456", 0, false, "numbers with latin small letter e with diaeresis"},
		{"123\354456", 0, false, "numbers with latin small letter i with grave"},
		{"123\355456", 0, false, "numbers with latin small letter i with acute"},
		{"123\356456", 0, false, "numbers with latin small letter i with circumflex"},
		{"123\357456", 0, false, "numbers with latin small letter i with diaeresis"},
		{"123\360456", 0, false, "numbers with latin small letter eth"},
		{"123\361456", 0, false, "numbers with latin small letter n with tilde"},
		{"123\362456", 0, false, "numbers with latin small letter o with grave"},
		{"123\363456", 0, false, "numbers with latin small letter o with acute"},
		{"123\364456", 0, false, "numbers with latin small letter o with circumflex"},
		{"123\365456", 0, false, "numbers with latin small letter o with tilde"},
		{"123\366456", 0, false, "numbers with latin small letter o with diaeresis"},
		{"123\367456", 0, false, "numbers with division sign"},
		{"123\370456", 0, false, "numbers with latin small letter o with stroke"},
		{"123\371456", 0, false, "numbers with latin small letter u with grave"},
		{"123\372456", 0, false, "numbers with latin small letter u with acute"},
		{"123\373456", 0, false, "numbers with latin small letter u with circumflex"},
		{"123\374456", 0, false, "numbers with latin small letter u with diaeresis"},
		{"123\375456", 0, false, "numbers with latin small letter y with acute"},
		{"123\376456", 0, false, "numbers with latin small letter thorn"},
		{"123\377456", 0, false, "numbers with latin small letter y with diaeresis"},
	}

	for _, tc := range cases {
		t.Run(tc.desc, func(t *testing.T) {
			got, err := money.ParseAmount(tc.in)
			if tc.ok && err != nil {
				t.Fatalf("ParseAmount(%q) unexpected error: %v", tc.in, err)
			}
			if !tc.ok && err == nil {
				t.Fatalf("ParseAmount(%q) expected error, got nil", tc.in)
			}
			if tc.ok && got != tc.want {
				t.Fatalf("ParseAmount(%q) = %d, want %d", tc.in, got, tc.want)
			}
		})
	}
}
